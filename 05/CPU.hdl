// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15],out=aInstructBit);
    Mux16(a=aval,b=instruction,sel=aInstructBit,out=newARegVal);

    // loadAReg: true if aInstructBit OR instruction[15] AND instruction[5] (A-Instruction Or (C-Instruction & d1=1) )
    And(a=instruction[15],b=instruction[5],out=cInstructAndLoadA);
    Or(a=aInstructBit,b=cInstructAndLoadA,out=loadAReg);

    ARegister(in=newARegVal,load=loadAReg,out=areg,out[0..14]=addressM);

    // loadDReg : true if instruction[15] AND instruction[4] (C-Instruction & d2=1)
    And(a=instruction[15],b=instruction[4],out=loadDReg);

    DRegister(in=dval,load=loadDReg,out=dreg);

    // writeM : true if instruction[15] AND instruction[3] (C-Instruction & d3=1)
    And(a=instruction[15],b=instruction[3],out=writeM);
    
    Mux16(a=areg,b=inM,sel=instruction[12],out=aOrMreg);
    ALU(x=dreg,y=aOrMreg,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=dval,out=aval,zr=zero,ng=neg);
    
    PC(in=areg,load=pcload,inc=true,reset=reset,out[0..14]=pc);

    // Computing PC Load
    Not(in=zero,out=notzero);
    Not(in=neg,out=notneg);

    // JGT
    And(a=notneg,b=notzero,out=jgt);

    // JEQ (zero)

    // JGE
    Or(a=jgt,b=zero,out=jge);

    // JLT (neg)

    // JNE
    Or(a=neg,b=jgt,out=jne);

    // JLE
    Or(a=neg,b=zero,out=jle);

    // Homegrown Mux8Way (4 Muxes on the 0 j bit, 2 muxes on the 1th, and 1 mux on the 3)
    Mux(a=false,b=jgt,sel=instruction[0],out=t1);
    Mux(a=zero,b=jge,sel=instruction[0],out=t2);
    Mux(a=neg,b=jne,sel=instruction[0],out=t3);
    Mux(a=jle,b=true,sel=instruction[0],out=t4);

    Mux(a=t1,b=t2,sel=instruction[1],out=t5);
    Mux(a=t3,b=t4,sel=instruction[1],out=t6);

    Mux(a=t5,b=t6,sel=instruction[2],out=pcl);
    And(a=instruction[15],b=pcl,out=pcload);

    //Mux8Way(a=false,b=jgt,c=zero,d=jge,e=neg,f=jne,g=jle,h=true,sel=instruction[0..2],out=pcl)
}